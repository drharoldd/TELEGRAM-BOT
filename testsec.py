from aiogram.types import callback_query

import config
import logging
import sqlite3
from datetime import datetime, timedelta
import asyncio

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.message import ContentType

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('subscriptions.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–¥–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute('''CREATE TABLE IF NOT EXISTS subscriptions
                  (user_id INTEGER PRIMARY KEY, username TEXT, expiry_date TEXT, transaction_id TEXT, notification_sent INTEGER)''')
conn.commit()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç—ã
CURRENCY = "SOL"

# –¶–µ–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Å—Ä–æ–∫–∏ (–≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
SUBSCRIPTION_PRICES = {
    '10_seconds': types.LabeledPrice(label="Subscription for 10 seconds", amount=10 * 100),
    '20_seconds': types.LabeledPrice(label="Subscription for 20 seconds", amount=20 * 100),
    '30_seconds': types.LabeledPrice(label="Subscription for 30 seconds", amount=30 * 100),
    '60_seconds': types.LabeledPrice(label="Subscription for 60 seconds", amount=60 * 100)
}

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
AVAILABLE_COMMANDS = [
    "/start - start the bot",
    "/help - get the list of available commands",
    "/subscribe - activate a subscription",
    "/subscription_status - check subscription status"
]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    help_message = "Here are the available commands:\n"
    help_message += "\n".join(AVAILABLE_COMMANDS)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    await message.answer(help_message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_subscription(user_id, username, expiry_date, transaction_id):
    cursor.execute("INSERT OR REPLACE INTO subscriptions (user_id, username, expiry_date, transaction_id, notification_sent) VALUES (?, ?, ?, ?, ?)",
                   (user_id, username, expiry_date, transaction_id, 0))  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ notification_sent –≤ 0 (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ)
    conn.commit()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription_expiry():
    current_date = datetime.now()
    cursor.execute("SELECT user_id, username, expiry_date FROM subscriptions")
    for user_id, username, expiry_date in cursor.fetchall():
        if datetime.strptime(expiry_date, "%Y-%m-%d %H:%M:%S") <= current_date:
            yield user_id


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def send_subscription_expiry_notification(user_id):
    await bot.send_message(user_id, "Your subscription has expired. You can /subscribe again at any time")
    cursor.execute("UPDATE subscriptions SET notification_sent = ? WHERE user_id = ?", (1, user_id))  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ notification_sent –≤ 1 (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ)
    conn.commit()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription_expiry_task():
    while True:
        async for user_id in check_subscription_expiry():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            cursor.execute("SELECT notification_sent FROM subscriptions WHERE user_id = ?", (user_id,))
            notification_sent = cursor.fetchone()[0]
            if not notification_sent:
                await send_subscription_expiry_notification(user_id)
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
    start_message = "Welcome to our subscription service!\n"
    start_message += "Here are the available commands:\n"
    start_message += "\n".join(AVAILABLE_COMMANDS)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
    await message.answer(start_message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message_handler(commands=['subscribe'])
async def subscribe(message: types.Message):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    markup = types.InlineKeyboardMarkup()
    for subscription_id, price in SUBSCRIPTION_PRICES.items():
        button = types.InlineKeyboardButton(f"{price.label} - {price.amount // 100} {CURRENCY}",
                                             callback_data=subscription_id)
        markup.add(button)


    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    await message.answer("Choose the subscription period:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscription_status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(commands=['subscription_status'])
async def check_subscription_status(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    cursor.execute("SELECT expiry_date FROM subscriptions WHERE user_id = ? AND expiry_date > ?",
                   (message.from_user.id, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    subscription_info = cursor.fetchone()

    if subscription_info:
        expiry_date = subscription_info[0]
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –µ—ë —Å—Ä–æ–∫–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        await message.answer(f"You have an active subscription. Expiry date: {expiry_date}")
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        await message.answer("You don't have an active subscription.")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_subscriptions = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query_handler(lambda c: c.data in SUBSCRIPTION_PRICES.keys())
async def process_subscription_choice(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
    chosen_subscription = SUBSCRIPTION_PRICES[callback_query.data]

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ
    user_subscriptions[callback_query.from_user.id] = chosen_subscription.label

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    confirm_button = types.InlineKeyboardButton("Confirm payment", callback_data="confirm_payment")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    await bot.send_message(callback_query.from_user.id,
                           f"üîî Subscription Activation üîî\n\n"
                           f"To activate your subscription, please make a payment of {SUBSCRIPTION_PRICES[callback_query.data]}"
                           " SOL to the following address:\n"
                           "GURQMAvEJgaHsot3Pb5QkbhMtAaboN7mYtNNZm6eQoqp\n\n"
                           "Note:\n"
                           "- If the amount is less than required, the verification will NOT pass.\n"
                           "- Any amount over will be considered as a donation and is non-refundable.\n\n"
                           "Once done, press 'Confirm payment' or return if you wish to cancel.",
                           reply_markup=types.InlineKeyboardMarkup().add(confirm_button))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
@dp.callback_query_handler(lambda c: c.data == "confirm_payment")
async def process_confirm_payment(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "Payment confirmed. Please provide your wallet address.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
@dp.message_handler(content_types=ContentType.TEXT)
async def handle_wallet_address(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞
    if message.text.strip() == 'qwerty':
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        subscription_label = user_subscriptions.get(message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∫—É
        if subscription_label:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            chosen_subscription_id = [key for key, value in SUBSCRIPTION_PRICES.items() if value.label == subscription_label][0]

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            subscription_duration = int(chosen_subscription_id.split('_')[0])

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transaction_id = '12345'

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            if await check_transaction(transaction_id, message.text.strip()):
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
                current_date = datetime.now()

                # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
                expiry_date = current_date + timedelta(seconds=subscription_duration)
                expiry_date_str = expiry_date.strftime("%Y-%m-%d %H:%M:%S")

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                add_subscription(message.from_user.id, message.from_user.username, expiry_date_str, transaction_id)

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ
                await bot.send_message(message.chat.id, "Payment confirmed. Thank you for subscribing!")
            else:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                await bot.send_message(message.chat.id, "Payment verification failed. Please try again later.")
        else:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            await bot.send_message(message.chat.id, "Please reply to the message with subscription options.")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        cursor.execute("SELECT user_id FROM subscriptions WHERE user_id = ? AND expiry_date > ?",
                       (message.from_user.id, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        subscription_exists = cursor.fetchone()
        if subscription_exists:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞–ª–∏—á–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            await bot.send_message(message.chat.id, "You already have an active subscription.")
        else:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –∫–æ—à–µ–ª—å–∫–µ
            await bot.send_message(message.chat.id, "Invalid wallet address. Please try again.")
async def check_transaction(transaction_id, wallet_address):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    # –í –¥–∞–Ω–Ω–æ–π –∑–∞–≥–ª—É—à–∫–µ –º—ã –ø—Ä–æ—Å—Ç–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º, —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    expected_wallet_address = 'qwerty'
    if wallet_address == expected_wallet_address:
        return True  # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    else:
        return False  # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(check_subscription_expiry_task())
    executor.start_polling(dp, skip_updates=False)
